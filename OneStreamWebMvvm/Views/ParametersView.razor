@page "/parametersview"
@page "/parametersview/{paramname}"
@inherits ComponentViewBase<ParametersViewModel>
@namespace OneStreamWebMvvm


<div style="margin-top: 25px;">
    <div><h3 style="color: #000;">Counter</h3></div>
    <div style="margin-top: 20px;">
        <div style="padding: 10px 0; background-color: #F0F0F0; font-size: .85rem;">
            <div style="padding: 10px 30px;">
                You can also pass down parameters to your view model. If you set a binding context you can
                declare your parameters just as you would before but you also declare them in your view model.
                They will be passed down to it automatically.
                Enter a new value down below and click the button. See how the url changed and the parameter is shown.
            </div>
        </div>
    </div>
</div>

<p style="margin-top: 20px;">My Name is @Bind(x => x.ParamName)</p>

<EditForm Model="BindingContext">
    <InputText @bind-Value="@BindingContext.NewName" />
    <div style="margin-top: 20px;"><button class="btn btn-primary" @onclick="@BindingContext.NavigateToNewName">Navigate</button></div>
</EditForm>


@code {

    [Parameter] public string? ParamName { get; set; }


}